---
title: OpenProblems core packages
format: gfm
---

```{r include=FALSE}
# set wd to tempdir
knitr::opts_knit$set(root.dir = tempdir())
```

This repository provides OpenProblems core helper packages in R and Python.

## Installation

You can install the Python package with pip:

```bash
pip install "git+https://github.com/openproblems-bio/core.git#egg=openproblems&subdirectory=packages/python/openproblems"
```

You can install the R package with devtools:

```r
devtools::install_github("openproblems-bio/core/packages/r/openproblems")
```

When installing with viash, there are several ways to install the package. Here are some examples:

### Python

```yaml
- type: python
    pypi: 
        - git+https://github.com/openproblems-bio/core.git#egg=openproblems&subdirectory=packages/python/openproblems
```

```yaml
- type: python
    github: 
        - openproblems-bio/core.git#egg=openproblems&subdirectory=packages/python/openproblems
```

```yaml
- type: python
    git: 
        - https://github.com/openproblems-bio/core.git#egg=openproblems&subdirectory=packages/python/openproblems
```

### R

```yaml
- type: r
    github: 
        - openproblems-bio/core/packages/r/openproblems
```

## Example usage

```{bash}
git clone https://github.com/openproblems-bio/task_perturbation_prediction.git
```

### Python

```{python}
import openproblems
```

#### Find project root

```{python}
path = "task_perturbation_prediction/src/api/comp_method.yaml"

openproblems.project.find_project_root(path)
```

### Read nested yaml

```{python}
comp_method = openproblems.io.read_nested_yaml(path)
```

<details><summary>Contents of `comp_method`</summary>

```yaml
```{python echo=FALSE, output="asis"}
import yaml

print(yaml.dump(comp_method))
```
```

</details>

### Strip margin

```{python}
print(openproblems.utils.strip_margin("""
  |this_is:
  |  a_yaml: 'test'
  |"""))
```

### R

```{r}
library(openproblems)
```

#### Find project root

```{r}
path <- "task_perturbation_prediction/src/api/comp_method.yaml"

openproblems::find_project_root(path)
```

### Read nested yaml

```{r}
comp_method <- openproblems::read_nested_yaml(path)
```

<details><summary>Contents of `comp_method`</summary>

```yaml
```{r echo=FALSE, output="asis"}
cat(yaml::as.yaml(comp_method))
```
```

</details>

### Strip margin

```{r}
cat(openproblems::strip_margin("
  |this_is:
  |  a_yaml: 'test'
  |"))
```
